class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        parent = {}
        size = {}
        def find(x):
            if x not in parent:
                parent[x]=x
                size[x]=1
            if parent[x]!=x:
                parent[x]=find(parent[x])
            return parent[x]
        def ufind(a,b):
            x = find(a)
            y = find(b)
            if x==y:
                return
            parent[x]=y
            size[y]+=size[x]
        
        m = len(graph)
        n = len(graph[0])

        for i in range(m):
            for j in range(n):
                if graph[i][j]==1:
                    ufind(i,j)
        
        spread = 0
        d = {}
        for x in initial:
            d[x]=find(x)
        par = collections.defaultdict(int)
        for x in d.values():
            par[x]+=1
        for parent in set(d.values()):
            spread += (size[parent])
        # print(spread,par,d)
        ans = float('inf')
        res = -1
        for x in sorted(initial):
            actual= (spread - (size[d[x]] if par[d[x]]<=1 else 0))
            # print(actual,ans)
            if actual< ans:
                ans = actual
                res = x
        return res